// Code generated by protoc-gen-go.
// source: killer.proto
// DO NOT EDIT!

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	killer.proto

It has these top-level messages:
	KillReq
	KillRsp
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KillReq struct {
	TargetName string `protobuf:"bytes,1,opt,name=TargetName" json:"TargetName,omitempty"`
}

func (m *KillReq) Reset()                    { *m = KillReq{} }
func (m *KillReq) String() string            { return proto.CompactTextString(m) }
func (*KillReq) ProtoMessage()               {}
func (*KillReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KillReq) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

type KillRsp struct {
	// 结果信息
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *KillRsp) Reset()                    { *m = KillRsp{} }
func (m *KillRsp) String() string            { return proto.CompactTextString(m) }
func (*KillRsp) ProtoMessage()               {}
func (*KillRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KillRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*KillReq)(nil), "homework.killer.v1.KillReq")
	proto.RegisterType((*KillRsp)(nil), "homework.killer.v1.KillRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Killer service

type KillerClient interface {
	Kill(ctx context.Context, in *KillReq, opts ...grpc.CallOption) (*KillRsp, error)
}

type killerClient struct {
	cc *grpc.ClientConn
}

func NewKillerClient(cc *grpc.ClientConn) KillerClient {
	return &killerClient{cc}
}

func (c *killerClient) Kill(ctx context.Context, in *KillReq, opts ...grpc.CallOption) (*KillRsp, error) {
	out := new(KillRsp)
	err := grpc.Invoke(ctx, "/homework.killer.v1.Killer/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Killer service

type KillerServer interface {
	Kill(context.Context, *KillReq) (*KillRsp, error)
}

func RegisterKillerServer(s *grpc.Server, srv KillerServer) {
	s.RegisterService(&_Killer_serviceDesc, srv)
}

func _Killer_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KillerServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homework.killer.v1.Killer/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KillerServer).Kill(ctx, req.(*KillReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Killer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "homework.killer.v1.Killer",
	HandlerType: (*KillerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kill",
			Handler:    _Killer_Kill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "killer.proto",
}

func init() { proto.RegisterFile("killer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xce, 0xcc, 0xc9,
	0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xca, 0xc8, 0xcf, 0x4d, 0x2d, 0xcf,
	0x2f, 0xca, 0xd6, 0x83, 0x0a, 0x97, 0x19, 0x4a, 0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea,
	0x27, 0x16, 0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43,
	0x74, 0x28, 0x69, 0x72, 0xb1, 0x7b, 0x67, 0xe6, 0xe4, 0x04, 0xa5, 0x16, 0x0a, 0xc9, 0x71, 0x71,
	0x85, 0x24, 0x16, 0xa5, 0xa7, 0x96, 0xf8, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x21, 0x89, 0x28, 0x29, 0x43, 0x95, 0x16, 0x17, 0x08, 0x49, 0x70, 0xb1, 0xe7, 0xa6, 0x16,
	0x17, 0x27, 0xa6, 0xc3, 0xd4, 0xc1, 0xb8, 0x46, 0x31, 0x5c, 0x6c, 0xde, 0x60, 0xab, 0x85, 0x82,
	0xb8, 0x58, 0x40, 0x2c, 0x21, 0x69, 0x3d, 0x4c, 0x47, 0xe9, 0x41, 0xed, 0x94, 0xc2, 0x2d, 0x59,
	0x5c, 0xa0, 0x24, 0xd0, 0x74, 0xf9, 0xc9, 0x64, 0x26, 0x2e, 0x25, 0x0e, 0xfd, 0x32, 0x43, 0x7d,
	0x90, 0xb4, 0x93, 0x6c, 0x94, 0x34, 0x4c, 0xbd, 0x81, 0x09, 0xd8, 0x47, 0x10, 0x5d, 0xfa, 0x65,
	0x86, 0xd6, 0x65, 0x86, 0x49, 0x6c, 0x60, 0x3f, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdc,
	0x92, 0x78, 0x6e, 0x15, 0x01, 0x00, 0x00,
}
